import datetime
from config import dp
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from context import UserState
from keyboards.buttons import back_markup, back_message
import smtplib
from app import cmd_start
import psycopg2 as ps
all_info = ''


async def send_mail(mail, text):
    sender = 'iMediatorChatBot@yandex.ru'
    password = '!QZ2wxas'
    mail_lib = smtplib.SMTP_SSL('smtp.yandex.ru', 465)
    mail_lib.login(sender, password)
    msg = 'From: %s\r\nTo: %s\r\nContent-Type: text/plain; charset="utf-8"\r\nSubject: %s\r\n\r\n' % (
        sender, mail, '–ó–∞—è–≤–∫–∞')
    msg += text
    mail_lib.sendmail(sender, mail, msg.encode('utf8'))
    mail_lib.quit()


@dp.message_handler(text=['–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', '–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ, –≥–æ—Ç–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'], state=None)
async def cmd_two(message: types.Message):
    markup = ReplyKeyboardRemove()
    await message.answer('–Ø –≤–∞—Å –ø–æ–Ω—è–ª. –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    await UserState.name.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –§–ò–û:', reply_markup=markup)


@dp.message_handler(state=UserState.name)
async def cmd_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await UserState.next()
        await message.answer('–ì–æ—Ä–æ–¥:', reply_markup=back_markup())


@dp.message_handler(text=back_message, state=UserState.city)
async def process_name_back(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å <b>' + data['name'] + '</b>?')
    await UserState.name.set()


@dp.message_handler(state=UserState.city)
async def cmd_city(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    send_phone = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(send_phone)
    markup.add(back_message)
    async with state.proxy() as data:
        data['city'] = message.text
        await UserState.next()
        await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=markup)


@dp.message_handler(text=back_message, state=UserState.phone_number)
async def process_city_back(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ —Å <b>' + data['city'] + '</b>?',
                             reply_markup=back_markup())
    await UserState.city.set()


@dp.message_handler(content_types=ContentType.CONTACT, state=UserState.phone_number)
async def cmd_phone_number_markup(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardRemove()
    async with state.proxy() as data:
        if message.contact is not None:
            data['phone_number'] = message.contact['phone_number']
            await UserState.next()
            await message.answer('–ü–æ—á—Ç—É:', reply_markup=markup)


@dp.message_handler(state=UserState.phone_number)
async def cmd_phone_number_message(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardRemove()
    async with state.proxy() as data:
        data['phone_number'] = message.text
        await UserState.next()
        await message.answer('–ü–æ—á—Ç—É:', reply_markup=markup)


@dp.message_handler(text=back_message, state=UserState.email)
async def process_number_back(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Å <b>' + data['phone_number'] + '</b>?',
                             reply_markup=back_markup())
    await UserState.phone_number.set()


@dp.message_handler(state=UserState.email)
async def cmd_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['email'] = message.text
        await UserState.next()
        await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é')


@dp.message_handler(text=back_message, state=UserState.comment)
async def process_email_back(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É —Å <b>' + data['email'] + '</b>?',
                             reply_markup=back_markup())
    await UserState.email.set()


@dp.message_handler(text=back_message, state=UserState.comment)
async def process_name_back(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å <b>' + data['name'] + '</b>?',
                             reply_markup=back_markup())
    await UserState.comment.set()


@dp.message_handler(state=UserState.comment)
async def cmd_comment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global all_info
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–î–∞.', '–ù–µ—Ç')
        data['comment'] = message.text
        time = datetime.datetime.now()
        list_name = data['name'].split()
        all_info = f"–§–ò–û: {data['name']}\n" \
                   f"–ì–æ—Ä–æ–¥: {data['city']}\n" \
                   f"–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: {data['phone_number']}\n" \
                   f"–ü–æ—á—Ç–∞:  {data['email']}\n" \
                   f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comment']}\n" \
                   f"–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {time}"
        try:
            connect = ps.connect(host='92.255.76.86',
                                 port=5432,
                                 database='imediators',
                                 user='mekan99',
                                 password='Mm6347455627.')
            if len(list_name) == 2:
                with connect.cursor() as cursor:
                    cursor.execute("""INSERT INTO users (firstname, lastname, patronymic, city, phone_number, email, 
                    comment_users, where_user, date_request, user_request, search_mediators, work_mediators, payments, 
                    refusal, expectation, comment_admin) 
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)""",
                                   (list_name[0], list_name[1], None, data['city'], data['phone_number'],
                                    data['email'],
                                    data['comment'], 'telegram', time, None, None, None, None, None, None, None))
                    connect.commit()
            else:
                with connect.cursor() as cursor:
                    cursor.execute("""INSERT INTO users (firstname, lastname, patronymic, city, phone_number, email, 
                    comment_users, where_user, date_request, user_request, search_mediators, work_mediators, payments, 
                    refusal, expectation, comment_admin) 
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)""",
                                   (list_name[0], list_name[1], list_name[2], data['city'], data['phone_number'],
                                    data['email'],
                                    data['comment'], 'telegram', time, None, None, None, None, None, None, None))
                    connect.commit()

        except Exception as ex:
            print(f"[Error] {ex}")
        finally:
            if connect:
                connect.close()
        await send_mail('info.i.mediator@yandex.ru', all_info)
        await message.answer("–°–ø–∞—Å–∏–±–æ!"
                             "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=markup)

    await state.finish()


@dp.message_handler(text='–ö—Ç–æ –≤—ã?')
async def cmd_one(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö—Ç–æ —Ç–∞–∫–æ–π –º–µ–¥–∏–∞—Ç–æ—Ä?")
    await message.answer('–ú—ã ‚Äî —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞—Ç–æ—Ä–æ–≤.\n'
                         '–ü–æ–º–æ–≥–∞–µ–º —Ä–µ—à–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, —Å–µ–º–µ–π–Ω—ã–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã –≤–æ –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.')
    await message.answer("–ö –Ω–∞–º –æ–±—Ä–∞—â–∞—é—Ç—Å—è, –µ—Å–ª–∏:\n"
                         "-–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏\n"
                         "-–ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n"
                         "-–∞ —Ç–∞–∫–∂–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞ –≤ –±—É–¥—É—â–µ–º", reply_markup=markup)


@dp.message_handler(text='–ó–∞—á–µ–º –º–Ω–µ —ç—Ç–æ?')
async def cmd_two(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö—Ç–æ —Ç–∞–∫–æ–π –º–µ–¥–∏–∞—Ç–æ—Ä?")
    await message.answer("–ö –Ω–∞–º –æ–±—Ä–∞—â–∞—é—Ç—Å—è, –µ—Å–ª–∏:\n"
                         "-–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏\n"
                         "-–ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n"
                         "-–∞ —Ç–∞–∫–∂–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–æ—Ä–∞ –≤ –±—É–¥—É—â–µ–º", reply_markup=markup)


@dp.message_handler(text="–ö—Ç–æ —Ç–∞–∫–æ–π –º–µ–¥–∏–∞—Ç–æ—Ä?")
async def who_it_mediators(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏?", "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è –º–µ–¥–∏–∞—Ü–∏—è?")
    markup.add("–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    await message.answer('–ú–µ–¥–∏–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏—á—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ —Å–ø–æ—Ä–µ.\n'
                         '–ï–≥–æ –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n'
                         '- –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—É—Å–ª–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ.\n'
                         '- –ø–æ–º–æ—á—å —Å—Ç–æ—Ä–æ–Ω–∞–º –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.\n'
                         '95% —Å–æ–≥–ª–∞—à–µ–Ω–∏–π, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –º–µ–¥–∏–∞—Ü–∏–∏, –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ!',
                         reply_markup=markup)


@dp.message_handler(text="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏?")
async def price_mediators(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è –º–µ–¥–∏–∞—Ü–∏—è?")
    markup.add("–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    await message.answer("–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–∏–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã."
                         "–ù–æ –∑–∞—á–∞—Å—Ç—É—é —É—Å–ª—É–≥–∏ –º–µ–¥–∏–∞—Ç–æ—Ä–∞ –æ–±—Ö–æ–¥—è—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à–µ–≤–ª–µ —É—Å–ª—É–≥ –∞–¥–≤–æ–∫–∞—Ç–∞,"
                         "a –æ–ø–ª–∞—Ç–∞ –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –≤ —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –∏ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ "
                         "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞", reply_markup=markup)


@dp.message_handler(text='–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è –º–µ–¥–∏–∞—Ü–∏—è?')
async def time_mediaciya(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —É –º–µ–Ω—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã")
    markup.add("–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    await message.answer("–í —Å—Ä–µ–¥–Ω–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è 2-4 –º–µ–¥–∏–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 2-3 "
                         "–Ω–µ–¥–µ–ª–∏.\n "
                         "–ù–æ –≤—Å–µ —Å–ª—É—á–∞–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. "
                         "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Å–º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏.",
                         reply_markup=markup)


@dp.message_handler(text='–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —É –º–µ–Ω—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã')
async def questions(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ, –≥–æ—Ç–æ–≤ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
    markup.add("–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã")
    markup.add("–ì–¥–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã?")
    markup.add("–ü–æ–º–æ–∂–µ—Ç –ª–∏ –º–µ–¥–∏–∞—Ç–æ—Ä –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ?")
    markup.add("–ê –µ—Å–ª–∏ –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ–π –º–µ–¥–∏–∞—Ç–æ—Ä?")
    markup.add("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞—Ç–æ—Ä–∞–º–∏")
    markup.add("–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —è –ø–æ–ª—É—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç?")
    markup.add("–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏?")
    await message.answer("–Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=markup)


"""–ë–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"""


@dp.message_handler(text="–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã")
async def stages_works(message: types.Message):
    await message.answer("1. –ü—Ä–æ–≤–æ–¥–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –≥–¥–µ –∑–Ω–∞–∫–æ–º–∏–º —Å–æ —Å—Ä–æ–∫–∞–º–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é\n"
                         "2. –ó–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä, —Å–æ–≥–ª–∞—Å—É–µ–º –ø–ª–∞–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á\n"
                         "3. –ü—Ä–æ–≤–æ–¥–∏–º –º–µ–¥–∏–∞—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n"
                         "4. –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 50/50")


@dp.message_handler(text='–ì–¥–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã?')
async def negotiation(message: types.Message):
    await message.answer("–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –º–µ–¥–∏–∞—Ü–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏. "
                         "–í–µ–¥—å –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤–∞–∂–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.\n"
                         "–ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ—á–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ,"
                         "–æ–±—Å—É–¥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ–Ω–ª–∞–π–Ω.")


@dp.message_handler(text='–ü–æ–º–æ–∂–µ—Ç –ª–∏ –º–µ–¥–∏–∞—Ç–æ—Ä –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ?')
async def help_mediators(message: types.Message):
    await message.answer("–ú–µ–¥–∏–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ –≤—Å–µ–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏ –æ—Ç –±—Ä–∞–∫–æ—Ä–∞–∑–≤–æ–¥–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ "
                         "—Ä–∞–∑–¥–µ–ª–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–æ –±–∏–∑–Ω–µ—Å-—Å–ø–æ—Ä–æ–≤."
                         "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤–∞—à —Å–ª—É—á–∞–π –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–µ–π—Å –¥–ª—è –º–µ–¥–∏–∞—Ü–∏–∏. –ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ, "
                         "–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.")


@dp.message_handler(text="–ê –µ—Å–ª–∏ –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ–π –º–µ–¥–∏–∞—Ç–æ—Ä?")
async def like_mediators(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞!\n"
                         "I-mediator - —ç—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞—Ç–æ—Ä–æ–≤. "
                         "–ï—Å–ª–∏ –≤–∞–º –ø–æ –∫–∞–∫–∏–º-–ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –º—ã –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ.")


@dp.message_handler(text='–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞—Ç–æ—Ä–∞–º–∏')
async def advantages_mediators(message: types.Message):
    await message.answer("–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
                         "<b>- –≠–∫–æ–Ω–æ–º–∏–º –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏.</b>\n"
                         "–£—Å–ª—É–≥–∏ –º–µ–¥–∏–∞—Ç–æ—Ä–∞ —Å—Ç–æ—è—Ç –¥–µ—à–µ–≤–ª–µ —É—Å–ª—É–≥ –∞–¥–≤–æ–∫–∞—Ç–∞ –∏, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ —Å–ø–æ—Ä–∞ "
                         "–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –µ–≥–æ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                         "- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º <b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. </b>\n"
                         "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –º–µ–¥–∏–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ.\n"
                         "<b>- –≠–∫–æ–Ω–æ–º–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è.</b>\n"
                         "–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—É–¥—ã –º–æ–≥—É—Ç –¥–ª–∏—Ç—å—Å—è –≥–æ–¥–∞–º–∏. –ú–µ–¥–∏–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–æ—Å—Ç–∏—á—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤—Å–µ–≥–æ –∑–∞ 2-4 "
                         "–Ω–µ–¥–µ–ª–∏.\n"
                         "- –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º <b> –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.</b>\n"
                         "–ü–ª—é—Å, –ë–æ–ª–µ–µ 85% —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –º–µ–¥–∏–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –∏ –±–µ–∑ "
                         "–∑–∞–¥–µ—Ä–∂–µ–∫.")


@dp.message_handler(text='–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —è –ø–æ–ª—É—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç?')
async def result_mediators(message: types.Message):
    await message.answer("–í —Å—Ä–µ–¥–Ω–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è 2-4 –º–µ–¥–∏–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 2-3 "
                         "–Ω–µ–¥–µ–ª–∏.\n"
                         "–ù–æ –≤—Å–µ —Å–ª—É—á–∞–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. "
                         "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Å–º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏.")


@dp.message_handler(text="–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏?")
async def mediators_price(message: types.Message):
    await message.answer("–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–∏–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã. "
                         "–ù–æ –∑–∞—á–∞—Å—Ç—É—é —É—Å–ª—É–≥–∏ –º–µ–¥–∏–∞—Ç–æ—Ä–∞ –æ–±—Ö–æ–¥—è—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à–µ–≤–ª–µ —É—Å–ª—É–≥ –∞–¥–≤–æ–∫–∞—Ç–∞, –∞ "
                         "–æ–ø–ª–∞—Ç–∞ –≤–∑–∏–º–∞–µ—Ç—Å—è —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –≤ —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –∏ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ "
                         "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞")


@dp.message_handler(text='–í –Ω–∞—á–∞–ª–æ')
async def main_menu(message: types.Message, state: FSMContext):
    await cmd_start(message, state)
